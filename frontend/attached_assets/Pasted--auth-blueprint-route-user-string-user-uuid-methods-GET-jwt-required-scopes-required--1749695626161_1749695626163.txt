@auth_blueprint.route("/user/<string:user_uuid>", methods=["GET"])
@jwt_required()
@scopes_required(PermissionScope.ADMIN.value, PermissionScope.SUPER_ADMIN.value)
def profile(user_uuid: str):
    current_uuid = get_jwt_identity()
    with SqlAlchemyUnitOfWork() as uow:
        user = uow.user_repository.find_one(uuid=user_uuid, is_deleted=False)
        if not user:
            raise NotFoundError("User not found")
        current_user = uow.user_repository.find_one(uuid=current_uuid, is_deleted=False)
        if not current_user:
            raise NotFoundError("Current user not found")
        if user_uuid != current_uuid and not current_user.is_admin:
            raise BadRequestError("You are not authorized to view this user")
        dto = UserRead.from_orm(user).model_dump(mode="json")
        return jsonify(dto), 200


@auth_blueprint.route("/user/<string:user_uuid>", methods=["PUT"])
@jwt_required()
@scopes_required(PermissionScope.ADMIN.value, PermissionScope.SUPER_ADMIN.value)
def update_user(user_uuid: str):
    req = UserUpdate(**request.json)
    current_user_uuid = get_jwt_identity()
    with SqlAlchemyUnitOfWork() as uow:
        user_read = UserDomain.update_user(
            uow=uow,
            user_uuid=user_uuid,
            payload=req,
            current_user_uuid=current_user_uuid,
        )
        dto = user_read.model_dump(mode="json")
        uow.commit()
    return jsonify(dto), 200


@auth_blueprint.route("/users", methods=["GET"])
@jwt_required()
@scopes_required(PermissionScope.ADMIN.value, PermissionScope.SUPER_ADMIN.value)
def list_users():
    # validate query-string args
    params = UserListParams(**request.args)

    # build SQLAlchemy filters
    filters = [UserModel.is_deleted == False]
    if params.uuid:
        filters.append(UserModel.uuid == params.uuid)
    if params.first_name:
        filters.append(UserModel.first_name == params.first_name)
    if params.last_name:
        filters.append(UserModel.last_name == params.last_name)
    if params.phone_number:
        filters.append(UserModel.phone_number == params.phone_number)
    if params.username:
        filters.append(UserModel.username == params.username)
    if params.email:
        filters.append(UserModel.email == params.email)
    if params.permission_scope:
        filters.append(UserModel.permission_scope == params.permission_scope.value)

    with SqlAlchemyUnitOfWork() as uow:
        page_obj = uow.user_repository.find_all_by_filters_paginated(
            filters=filters,
            page=params.page,
            per_page=params.per_page
        )

        # convert each model to a read-DTO
        items = [
            UserRead.from_orm(user).model_dump(mode="json")
            for user in page_obj.items
        ]

        result = UserPage(
            users=items,
            total_count=page_obj.total,
            page=page_obj.page,
            per_page=page_obj.per_page,
            pages=page_obj.pages
        ).model_dump(mode="json")

    return jsonify(result), 200

@auth_blueprint.route("/user/<string:user_uuid>", methods=["DELETE"])
@jwt_required()
@scopes_required(PermissionScope.ADMIN.value, PermissionScope.SUPER_ADMIN.value)
def delete_user(user_uuid: str):
    with SqlAlchemyUnitOfWork() as uow:
        user_read = UserDomain.delete_user(uow=uow, user_uuid=user_uuid)
        dto = user_read.model_dump(mode="json")
        uow.commit()
    return jsonify(dto), 200

# route to list permission scope enums
@auth_blueprint.route("/permissions", methods=["GET"])
def list_permissions():
    permissions = [p.value for p in PermissionScope]
    return jsonify(permissions), 200