import React, { useState, useEffect, useMemo } from 'react';
import {
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  ActivityIndicator,
  View,
  Modal,
  KeyboardAvoidingView,
  Platform
} from 'react-native';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { apiCall } from '@/utils/api';
import { LinearGradient } from 'expo-linear-gradient';
import { MapViewComponent } from '@/components/MapView';

interface Customer {
  uuid: string;
  email_address: string | null;
  company_name: string;
  full_name: string;
  phone_number: string;
  full_address: string;
  business_cards: string | null;
  notes: string | null;
  category: 'roastery' | 'restaurant' | 'minimarket' | 'supermarket' | 'distributer';
  coordinates: string | null;
  created_at: string;
  is_deleted: boolean;
  balance_per_currency: Record<string, number>;
}

interface CustomerPage {
  customers: Customer[];
  total_count: number;
  page: number;
  per_page: number;
  pages: number;
}

interface FilterState {
  uuid: string;
  category: string;
  customer_uuid: string;
  email_address: string;
  company_name: string;
  full_name: string;
  phone_number: string;
}

type ViewMode = 'list' | 'map';

interface DesktopCustomersLayoutProps {
  onCustomerPress: (customer: Customer) => void;
  onCreateCustomer: () => void;
}

export const DesktopCustomersLayout: React.FC<DesktopCustomersLayoutProps> = ({
  onCustomerPress,
  onCreateCustomer,
}) => {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [loading, setLoading] = useState(true);
  const [viewMode, setViewMode] = useState<ViewMode>('list');
  const [showFilters, setShowFilters] = useState(false);
  const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [categories, setCategories] = useState<string[]>([]);

  const [filters, setFilters] = useState<FilterState>({
    uuid: '',
    category: '',
    customer_uuid: '',
    email_address: '',
    company_name: '',
    full_name: '',
    phone_number: '',
  });

  const [appliedFilters, setAppliedFilters] = useState<FilterState>({
    uuid: '',
    category: '',
    customer_uuid: '',
    email_address: '',
    company_name: '',
    full_name: '',
    phone_number: '',
  });

  useEffect(() => {
    fetchCategories();
    fetchCustomers();
  }, []);

  useEffect(() => {
    fetchCustomers();
  }, [page, appliedFilters]);

  const fetchCategories = async () => {
    try {
      setCategories(['roastery', 'restaurant', 'minimarket', 'supermarket', 'distributer']);
    } catch (error) {
      console.error('Error fetching categories:', error);
      setCategories(['roastery', 'restaurant', 'minimarket', 'supermarket', 'distributer']);
    }
  };

  const fetchCustomers = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({ page: page.toString(), per_page: '20' });
      Object.entries(appliedFilters).forEach(([key, value]) => {
        if (value.trim()) params.append(key, value.trim());
      });
      const response = await apiCall<CustomerPage>(`/customer/?${params.toString()}`);

      if (response.status === 200 && response.data) {
        setCustomers(response.data.customers);
        setTotalPages(response.data.pages);
      } else {
        if (response.status === 0) {
          Alert.alert('Network Error', 'Unable to connect to the backend server.');
        } else {
          Alert.alert('Error', `Failed to load customers: ${response.error || 'Unknown error'}`);
        }
        setCustomers([]);
        setTotalPages(0);
      }
    } catch (error) {
      console.error('Error fetching customers:', error);
      Alert.alert('Error', 'Failed to load customers');
    } finally {
      setLoading(false);
    }
  };

  const handleFilterChange = (field: keyof FilterState, value: string) => {
    setFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    setAppliedFilters({ ...filters });
    setPage(1);
    setShowFilters(false);
    setShowCategoryDropdown(false);
  };

  const clearFilters = () => {
    const empty: FilterState = { uuid: '', category: '', customer_uuid: '', email_address: '', company_name: '', full_name: '', phone_number: '' };
    setFilters(empty);
    setAppliedFilters(empty);
    setPage(1);
    setShowFilters(false);
    setShowCategoryDropdown(false);
  };

  const hasActiveFilters = useMemo(
    () => Object.values(appliedFilters).some(v => v.trim()),
    [appliedFilters]
  );

  const CustomerCard = ({ customer }: { customer: Customer }) => {
    const totalBalance = Object.values(customer.balance_per_currency).reduce((sum, amt) => sum + amt, 0);
    const getBalanceColor = (balance: number) => (balance > 0 ? '#10b981' : balance < 0 ? '#ef4444' : '#6b7280');

    return (
      <TouchableOpacity style={styles.customerCard} onPress={() => onCustomerPress(customer)}>
        <View style={styles.customerHeader}>
          <ThemedText style={styles.customerName}>{customer.full_name}</ThemedText>
          <View style={styles.categoryBadge}>
            <ThemedText style={styles.categoryText}>{customer.category.toUpperCase()}</ThemedText>
          </View>
        </View>
        <ThemedText style={styles.customerDetail}>Company: {customer.company_name}</ThemedText>
        <ThemedText style={styles.customerDetail}>Email: {customer.email_address || 'No email provided'}</ThemedText>
        <ThemedText style={styles.customerDetail}>Phone: {customer.phone_number}</ThemedText>
        <ThemedText style={styles.customerDetail}>UUID: {customer.uuid}</ThemedText>
        <View style={styles.balanceContainer}>
          <ThemedText style={[styles.balanceText, { color: getBalanceColor(totalBalance) }]}>Balance: ${totalBalance.toFixed(2)}</ThemedText>
        </View>
      </TouchableOpacity>
    );
  };

  if (loading) {
    return (
      <ThemedView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#5469D4" />
          <ThemedText style={styles.loadingText}>Loading customers...</ThemedText>
        </View>
      </ThemedView>
    );
  }

  return (
    <ThemedView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <ThemedText style={styles.title}>Customers</ThemedText>
        <View style={styles.headerActions}>
          <TouchableOpacity
            style={[styles.filterToggle, hasActiveFilters && styles.filterToggleActive]}
            onPress={() => setShowFilters(true)}
          >
            <ThemedText style={[styles.filterToggleText, hasActiveFilters && styles.filterToggleTextActive]}>
              üîç Filters {hasActiveFilters && `(${Object.values(appliedFilters).filter(v => v.trim()).length})`}
            </ThemedText>
          </TouchableOpacity>
          <TouchableOpacity onPress={onCreateCustomer}>
            <LinearGradient colors={[ '#5469D4', '#4F46E5' ]} style={styles.createButton}>
              <ThemedText style={styles.createButtonText}>+ Add Customer</ThemedText>
            </LinearGradient>
          </TouchableOpacity>
        </View>
      </View>

      {/* View Toggle */}
      <View style={styles.viewToggleContainer}>
        <TouchableOpacity style={[styles.viewToggleTab, viewMode === 'list' && styles.activeViewToggleTab]} onPress={() => setViewMode('list')}>
          <ThemedText style={[styles.viewToggleText, viewMode === 'list' && styles.activeViewToggleText]}>üìã List View</ThemedText>
        </TouchableOpacity>
        <TouchableOpacity style={[styles.viewToggleTab, viewMode === 'map' && styles.activeViewToggleTab]} onPress={() => setViewMode('map')}>
          <ThemedText style={[styles.viewToggleText, viewMode === 'map' && styles.activeViewToggleText]}>üó∫Ô∏è Map View</ThemedText>
        </TouchableOpacity>
      </View>

      {/* Content */}
      <View style={styles.contentContainer}>
        {viewMode === 'list' ? (
          <ScrollView style={styles.scrollView} contentContainerStyle={styles.listContainer} showsVerticalScrollIndicator={false}>
            {customers.length === 0 ? (
              <View style={styles.emptyContainer}>
                <ThemedText style={styles.emptyText}>
                  {hasActiveFilters ? 'No customers match your filters' : 'No customers found'}
                </ThemedText>
              </View>
            ) : (
              customers.map(c => <CustomerCard key={c.uuid} customer={c} />)
            )}
          </ScrollView>
        ) : (
          <MapViewComponent customers={customers} onCustomerPress={onCustomerPress} />
        )}
      </View>

      {/* Pagination */}
      {totalPages > 1 && (
        <View style={styles.pagination}>
          <TouchableOpacity style={[styles.pageButton, page === 1 && styles.pageButtonDisabled]} disabled={page === 1} onPress={() => page > 1 && setPage(page - 1)}>
            <ThemedText style={[styles.pageButtonText, page === 1 && styles.pageButtonTextDisabled]}>Previous</ThemedText>
          </TouchableOpacity>
          <ThemedText style={styles.pageInfo}>Page {page} of {totalPages}</ThemedText>
          <TouchableOpacity style={[styles.pageButton, page === totalPages && styles.pageButtonDisabled]} disabled={page === totalPages} onPress={() => page < totalPages && setPage(page + 1)}>
            <ThemedText style={[styles.pageButtonText, page === totalPages && styles.pageButtonTextDisabled]}>Next</ThemedText>
          </TouchableOpacity>
        </View>
      )}

      {/* Inline Filter Modal */}
      {showFilters && (
        <Modal
          visible
          transparent={true}
          animationType="fade"
          onRequestClose={() => {
            setShowFilters(false);
            setShowCategoryDropdown(false);
          }}
        >
          <KeyboardAvoidingView
            behavior={Platform.OS === 'ios' ? 'padding' : undefined}
            style={styles.modalContainer}
          >
            <View style={styles.modalBackdrop} />
            <View style={styles.filterModal}>
              <View style={styles.filterHeader}>
                <ThemedText style={styles.filterTitle}>Filter Customers</ThemedText>
                <TouchableOpacity
                  onPress={() => {
                    setShowFilters(false);
                    setShowCategoryDropdown(false);
                  }}
                  style={styles.closeButtonContainer}
                >
                  <ThemedText style={styles.closeButton}>‚úï</ThemedText>
                </TouchableOpacity>
              </View>
              <ScrollView
                style={styles.filterContent}
                showsVerticalScrollIndicator={false}
                keyboardShouldPersistTaps="handled"
                nestedScrollEnabled={true}
              >
                {/* UUID Filter */}
                <View style={styles.filterGroup}>
                  <ThemedText style={styles.filterLabel}>UUID</ThemedText>
                  <TextInput
                    style={styles.filterInput}
                    value={filters.uuid}
                    onChangeText={v => handleFilterChange('uuid', v)}
                    placeholder="Enter UUID"
                    placeholderTextColor="#9ca3af"
                    autoCapitalize="none"
                    autoCorrect={false}
                  />
                </View>
                {/* Customer UUID, Category, Email, Company, Full Name, Phone - same structure... */}
                {/* Customer UUID Filter */}
                <View style={styles.filterGroup}>
                  <ThemedText style={styles.filterLabel}>Customer UUID</n
