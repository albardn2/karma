import React, { useState, useEffect } from 'react';
import { StyleSheet, ScrollView, TouchableOpacity, TextInput, Alert, ActivityIndicator, Platform, Dimensions, View } from 'react-native';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { useRouter } from 'expo-router';
import { apiCall } from '@/utils/api';
import { LinearGradient } from 'expo-linear-gradient';
import { MapViewComponent } from '@/components/MapView';
import { BottomNavigation } from '@/components/layout/BottomNavigation';
import { DesktopCustomersLayout } from '@/components/layouts/DesktopCustomersLayout';

interface Customer {
  uuid: string;
  email_address: string | null;
  company_name: string;
  full_name: string;
  phone_number: string;
  full_address: string;
  business_cards: string | null;
  notes: string | null;
  category: 'roastery' | 'restaurant' | 'minimarket' | 'supermarket' | 'distributer';
  coordinates: string | null;
  created_at: string;
  is_deleted: boolean;
  balance_per_currency: Record<string, number>;
}

interface CustomerPage {
  customers: Customer[];
  total_count: number;
  page: number;
  per_page: number;
  pages: number;
}

type ViewMode = 'list' | 'map';

export default function CustomersScreen() {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [filteredCustomers, setFilteredCustomers] = useState<Customer[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState<'all' | 'roastery' | 'restaurant' | 'minimarket' | 'supermarket' | 'distributer'>('all');
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [screenData, setScreenData] = useState(Dimensions.get('window'));
  const [viewMode, setViewMode] = useState<ViewMode>('list');
  const router = useRouter();

  const isWeb = Platform.OS === 'web';
  const isNative = Platform.OS === 'ios' || Platform.OS === 'android';
  const isMobileWeb = isWeb && screenData.width < 768;
  const isDesktop = isWeb && screenData.width >= 768;

  useEffect(() => {
    const onChange = ({ window }: any) => setScreenData(window);
    const sub = Dimensions.addEventListener('change', onChange);
    return () => sub?.remove();
  }, []);

  useEffect(() => {
    fetchCustomers();
  }, [page, searchTerm, categoryFilter]);

  const fetchCustomers = async () => {
    setLoading(true);
    try {
      const params = new URLSearchParams({ page: page.toString(), per_page: '20' });
      if (searchTerm) params.append('full_name', searchTerm);
      if (categoryFilter !== 'all') params.append('category', categoryFilter);

      const response = await apiCall<CustomerPage>(`/customer/?${params.toString()}`);
      if (response.status === 200 && response.data) {
        setCustomers(response.data.customers);
        setFilteredCustomers(response.data.customers);
        setTotalPages(response.data.pages);
      } else {
        Alert.alert('Error', response.error || 'Failed to load customers');
        setCustomers([]);
        setFilteredCustomers([]);
        setTotalPages(0);
      }
    } catch {
      Alert.alert('Network Error', 'Failed to load customers');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateCustomer = () => router.push('/customers/create');
  const handleCustomerPress = (c: Customer) => router.push(`/customers/${c.uuid}`);

  const parseCoordinates = (coord: string | null) => {
    if (!coord) return null;
    const [lat, lng] = coord.split(',').map(s => parseFloat(s));
    return isNaN(lat) || isNaN(lng) ? null : { lat, lng };
  };

  const TableHeader = () => (
    <View style={styles.tableHeader}>
      <ThemedText style={[styles.tableHeaderText, styles.nameHeaderColumn]}>Name & Company</ThemedText>
      <ThemedText style={[styles.tableHeaderText, styles.categoryHeaderColumn]}>Category</ThemedText>
      <ThemedText style={[styles.tableHeaderText, styles.contactHeaderColumn]}>Contact</ThemedText>
      <ThemedText style={[styles.tableHeaderText, styles.balanceHeaderColumn]}>Balance</ThemedText>
      <View style={styles.arrowHeaderColumn} />
    </View>
  );

  const CustomerCard = ({ customer }: { customer: Customer }) => {
    const total = Object.values(customer.balance_per_currency).reduce((a, b) => a + b, 0);
    const color = total > 0 ? '#059669' : total < 0 ? '#dc2626' : '#6b7280';
    const contact = customer.phone_number || customer.email_address || 'None';
    const catColors: Record<string, string> = {
      restaurant: '#f59e0b', roastery: '#8b5cf6', minimarket: '#06b6d4', supermarket: '#10b981', distributer: '#ef4444'
    };

    return (
      <TouchableOpacity style={styles.tableRow} onPress={() => handleCustomerPress(customer)}>
        <View style={styles.nameColumn}>
          <ThemedText style={styles.customerName} numberOfLines={1}>{customer.full_name}</ThemedText>
          <ThemedText style={styles.companyName} numberOfLines={1}>{customer.company_name}</ThemedText>
        </View>
        <View style={styles.categoryColumn}>
          <View style={[styles.categoryBadge, { backgroundColor: catColors[customer.category] }]}> 
            <ThemedText style={styles.categoryText}>{customer.category}</ThemedText>
          </View>
        </View>
        <View style={styles.contactColumn}>
          <ThemedText style={styles.contactText} numberOfLines={1}>{contact}</ThemedText>
        </View>
        <View style={styles.balanceColumn}>
          <ThemedText style={[styles.balanceValue, { color }]}>{total.toFixed(2)}</ThemedText>
        </View>
        <View style={styles.arrowColumn}><ThemedText style={styles.arrow}>â€º</ThemedText></View>
      </TouchableOpacity>
    );
  };

  if (loading) return (
    <ThemedView style={styles.container}>
      <ActivityIndicator size="large" color="#5469D4" />
    </ThemedView>
  );

  if (isDesktop) {
    return <DesktopCustomersLayout onCustomerPress={handleCustomerPress} onCreateCustomer={handleCreateCustomer} />;
  }

  return (
    <ThemedView style={styles.container}>
      <View style={[styles.header, isMobileWeb ? styles.mobileHeader : styles.desktopHeader]}>  
        <ThemedText style={[styles.title, isMobileWeb ? styles.mobileTitle : styles.desktopTitle]}>Customers</ThemedText>
        <TouchableOpacity onPress={handleCreateCustomer}>
          <LinearGradient colors={['#5469D4', '#4F46E5']} style={styles.createButton}>
            <ThemedText style={styles.createButtonText}>+ Add</ThemedText>
          </LinearGradient>
        </TouchableOpacity>
      </View>

      <View style={styles.filterSection}>
        <TextInput style={styles.searchInput} placeholder="Search..." value={searchTerm} onChangeText={setSearchTerm} placeholderTextColor="#666" />
        <ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={styles.categoryFilterContainer}>
          {(['all', 'roastery','restaurant','minimarket','supermarket','distributer'] as const).map(cat => (
            <TouchableOpacity key={cat} style={[styles.filterButton, categoryFilter===cat && styles.activeFilterButton]} onPress={()=>setCategoryFilter(cat)}>
              <ThemedText style={[styles.filterButtonText, categoryFilter===cat && styles.activeFilterButtonText]}>{cat}</ThemedText>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      {viewMode === 'list' ? (
        <ScrollView horizontal style={styles.tableContainer} contentContainerStyle={styles.tableContent} showsHorizontalScrollIndicator>
          <View>
            <TableHeader />
            {filteredCustomers.length === 0 ? (
              <View style={styles.emptyContainer}>
                <ThemedText style={styles.emptyText}>No customers found</ThemedText>
              </View>
            ) : (
              filteredCustomers.map(c => <CustomerCard key={c.uuid} customer={c} />)
            )}
          </View>
        </ScrollView>
      ) : (
        <MapViewComponent customers={filteredCustomers} onCustomerPress={handleCustomerPress} />
      )}

      {isMobileWeb && <BottomNavigation menuItems={[]} activeSection="customers" onSectionPress={()=>{}} />}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, backgroundColor:'#f8fafc' },
  header: { flexDirection:'row', justifyContent:'space-between', alignItems:'center', backgroundColor:'#fff', borderBottomWidth:1, borderColor:'#e5e7eb', padding:16 },
  desktopHeader:{padding:24},
  mobileHeader:{padding:16},
  title:{fontWeight:'bold',color:'#1f2937'},
  desktopTitle:{fontSize:32}, mobileTitle:{fontSize:24},
  createButton:{borderRadius:8,padding:12},
  createButtonText:{color:'#fff',fontWeight:'600',fontSize:14},
  filterSection:{backgroundColor:'#fff',padding:16,borderBottomWidth:1,borderColor:'#e5e7eb'},
  searchInput:{borderWidth:1,borderColor:'#d1d5db',borderRadius:8,padding:8,fontSize:14,backgroundColor:'#fff',marginBottom:8},
  categoryFilterContainer:{flexDirection:'row',gap:8},
  filterButton:{paddingVertical:6,paddingHorizontal:12,borderRadius:20,borderWidth:1,borderColor:'#d1d5db',marginRight:8},
  activeFilterButton:{backgroundColor:'#5469D4',borderColor:'#5469D4'},
  filterButtonText:{fontSize:12,color:'#6b7280'},
  activeFilterButtonText:{color:'#fff'},
  tableContainer:{flex:1},
  tableContent:{minWidth:600,paddingBottom:100},
  tableHeader:{flexDirection:'row',backgroundColor:'#f8fafc',borderBottomWidth:2,borderColor:'#e2e8f0',paddingVertical:4,paddingHorizontal:8},
  tableHeaderText:{fontSize:10,fontWeight:'700',color:'#64748b',textTransform:'uppercase',letterSpacing:0.5},
  nameHeaderColumn:{flex:2.5,marginRight:8},
  categoryHeaderColumn:{flex:1.2,textAlign:'center',marginRight:8},
  contactHeaderColumn:{flex:2,marginRight:8},
  balanceHeaderColumn:{flex:1.2,textAlign:'right',marginRight:4},
  arrowHeaderColumn:{width:16},
  tableRow:{flexDirection:'row',alignItems:'center',backgroundColor:'#fff',borderBottomWidth:1,borderColor:'#f1f5f9',paddingVertical:4,paddingHorizontal:8,minHeight:40},
  nameColumn:{flex:2.5,marginRight:8},
  customerName:{fontSize:12,fontWeight:'600',color:'#1e293b'},
  companyName:{fontSize:10,color:'#64748b'},
  categoryColumn:{flex:1.2,alignItems:'center',marginRight:8},
  categoryBadge:{paddingVertical:2,paddingHorizontal:6,borderRadius:8,alignItems:'center',minWidth:50},
  categoryText:{fontSize:8,fontWeight:'600',color:'#fff',textTransform:'capitalize'},
  contactColumn:{flex:2,marginRight:8},
  contactText:{fontSize:9,color:'#475569'},
  balanceColumn:{flex:1.2,alignItems:'flex-end',marginRight:4},
  balanceValue:{fontSize:10,fontWeight:'600'},
  arrowColumn:{width:16,alignItems:'center'},
  arrow:{fontSize:14,color:'#9ca3af',fontWeight:'300'},
  emptyContainer:{flex:1,justifyContent:'center',alignItems:'center',padding:40},
  emptyText:{fontSize:14,color:'#6b7280'},
});
