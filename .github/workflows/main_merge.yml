name: Prod – Build, Migrate & Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

env:
  HOST: ${{ secrets.PROD_DROPLET_HOST }}
  USER: root
  PASS: ${{ secrets.PROD_DROPLET_PASSWORD }}
  CERTBOT_EMAIL: zaid.bardan@gmail.com
  DOMAIN: api-prod.karma-grp.com
  CERT_PATH: /srv/myapp/certs

jobs:
  build:
    name: Build & Push prod images
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # 1) Grab the first 7 chars of the commit SHA
      - name: Determine short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      # 2) Build & push with two tags
      - name: Build & push images
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/albardn2/karma-backend:latest-prod
            ghcr.io/albardn2/karma-backend:${{ env.SHORT_SHA }}-prod

  sync-compose:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Prepare remote directory
        env:
          HOST: ${{ secrets.PROD_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.PROD_DROPLET_PASSWORD }}
        run: |
          sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no \
            "$USER@$HOST" "mkdir -p /srv/myapp"

      - name: Rsync docker-compose.prod.yaml
        env:
          HOST: ${{ secrets.PROD_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.PROD_DROPLET_PASSWORD }}
        run: |
          sshpass -p "$PASS" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/backend/docker-compose.prod.yaml" \
            "$USER@$HOST:/srv/myapp/docker-compose.yaml"

  migrate:
    name: Run DB migrations
    needs: sync-compose
    runs-on: ubuntu-latest
    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: SSH, login & run migrations
        run: |
          sshpass -p "${{ secrets.PROD_DROPLET_PASSWORD }}" \
            ssh -o StrictHostKeyChecking=no root@${{ secrets.PROD_DROPLET_HOST }} "\
              # ensure Docker is installed and running
              apt-get update && apt-get install -y curl && \
              curl -fsSL https://get.docker.com | sh && \
              systemctl enable --now docker && \
              # login to GHCR
              echo '${{ secrets.CR_PAT }}' | docker login ghcr.io \
                -u 'albardn2' --password-stdin && \
              cd /srv/myapp && \
              # pull latest images
              docker compose pull && \
              # start only the DB in the background
              docker compose up -d db && \
              # wait for the database to be ready
              echo 'Waiting for Postgres…' && \
              until docker compose exec db pg_isready -U local; do sleep 1; done && \
              # now run migrations
              docker compose run --rm migrate\
            "


  sync-compose-deploy:
    needs: migrate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Prepare remote dirs
        env:
          HOST: ${{ secrets.PROD_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.PROD_DROPLET_PASSWORD }}
        run: |
          sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no $USER@$HOST <<'EOF'
            mkdir -p /srv/myapp
            mkdir -p /srv/myapp/certs
            mkdir -p /srv/myapp/nginx/conf.d
            mkdir -p /srv/myapp/nginx/letsencrypt
            mkdir -p /srv/myapp/nginx/html/.well-known/acme-challenge
          EOF

      - name: Rsync docker-compose.prod.yaml (keep certs untouched)
        env:
          HOST: ${{ secrets.PROD_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.PROD_DROPLET_PASSWORD }}
        run: |
          sshpass -p "$PASS" rsync -avz \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/backend/docker-compose.prod.yaml" \
            "$USER@$HOST:/srv/myapp/docker-compose.yaml"

      - name: Rsync nginx configs & letsencrypt snippets
        env:
          HOST: ${{ secrets.PROD_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.PROD_DROPLET_PASSWORD }}
        run: |
          # conf.d
          sshpass -p "$PASS" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/backend/nginx/prod/conf.d/" \
            "$USER@$HOST:/srv/myapp/nginx/conf.d/"
          # letsencrypt
          sshpass -p "$PASS" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/backend/nginx/letsencrypt/" \
            "$USER@$HOST:/srv/myapp/nginx/letsencrypt/"

  deploy:
    needs: sync-compose-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Pull images, bootstrap & replace cert, reload nginx
        env:
          HOST: ${{ secrets.PROD_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.PROD_DROPLET_PASSWORD }}
          CERTBOT_EMAIL: zaid.bardan@gmail.com
          DOMAIN: api-prod.karma-grp.com
          CERT_PATH: /srv/myapp/certs
        run: |
          sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no $USER@$HOST <<EOF
            set -e

            echo "🔄 Pulling latest images…"
            cd /srv/myapp
            docker compose pull

            echo "🛠  Bootstrapping dummy cert (if missing)…"
            if [ ! -f /srv/myapp/certs/live/$DOMAIN/fullchain.pem ]; then
            mkdir -p /srv/myapp/certs/live/$DOMAIN
            docker run --rm \
            -v /srv/myapp/certs:/etc/letsencrypt \
            alpine:latest sh -euxc "\
            apk add --no-cache openssl && \
            openssl req -x509 -nodes -newkey rsa:2048 -days 1 \
            -keyout /etc/letsencrypt/live/$DOMAIN/privkey.pem \
            -out   /etc/letsencrypt/live/$DOMAIN/fullchain.pem \
            -subj '/CN=$DOMAIN' \
            "
            echo "✅ Dummy cert created at /srv/myapp/certs/live/$DOMAIN/fullchain.pem"
            else
            echo "ℹ️ Dummy cert already exists."
            fi

            echo "🚀 Starting db, web & nginx"
            docker compose up -d --force-recreate --remove-orphans db web nginx

            echo "🗑️ Removing dummy so Certbot will always fetch a real one…"
            rm -rf "\$CERT_PATH/live/$DOMAIN" \
                   "\$CERT_PATH/archive/$DOMAIN" \
                   "\$CERT_PATH/renewal/$DOMAIN.conf" || true

            echo "⚙️  Requesting real Let’s Encrypt cert via webroot…"
            docker compose run --rm --entrypoint certbot certbot certonly \
              --non-interactive --agree-tos --no-eff-email \
              --email "$CERTBOT_EMAIL" \
              --webroot -w /var/www/certbot \
              -d "$DOMAIN"

            echo "♻️ Reloading nginx to pick up the new certificate…"
            docker compose kill -s HUP nginx
          EOF
