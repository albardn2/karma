# .github/workflows/deploy.yml
name: CD – Deploy Dev Stack

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  sync-compose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Prepare remote dirs
        env:
          HOST: ${{ secrets.DEV_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.DEV_DROPLET_PASSWORD }}
        run: |
          sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no \
            "$USER@$HOST" <<'EOF'
            mkdir -p /srv/myapp
            mkdir -p /srv/myapp/certs
            mkdir -p /srv/myapp/nginx/html/.well-known/acme-challenge
            mkdir -p /srv/myapp/nginx/conf.d
          EOF

      - name: Rsync docker-compose + nginx config
        env:
          HOST: ${{ secrets.DEV_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.DEV_DROPLET_PASSWORD }}
        run: |
          sshpass -p "$PASS" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/backend/docker-compose.yaml" \
            "$GITHUB_WORKSPACE/backend/nginx" \
            "$USER@$HOST:/srv/myapp/"

  deploy:
    needs: sync-compose
    runs-on: ubuntu-latest
    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Pull images, issue cert & restart
        env:
          HOST: ${{ secrets.DEV_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.DEV_DROPLET_PASSWORD }}
          CERTBOT_EMAIL: zaid.bardan@gmail.com
          DOMAIN: api-dev.karma-grp.com
        run: |
          sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no $USER@$HOST <<EOF
            set -e
            cd /srv/myapp

            # 1) Pull latest images
            docker compose pull

            # 2) Bring up db & web (nginx must already be running for webroot)
            docker compose up -d --force-recreate --remove-orphans db web nginx

            # 3) Ensure challenge dir exists (just in case)
            mkdir -p nginx/html/.well-known/acme-challenge

            # 4) Run Certbot via webroot (auto-removes the container)
            if [ ! -d certs/live/$DOMAIN ]; then
              echo "⚙️  No cert for $DOMAIN, requesting via webroot…"
              docker compose run --rm certbot certonly \
                --non-interactive --agree-tos --no-eff-email \
                --email "$CERTBOT_EMAIL" \
                --webroot -w /var/www/certbot \
                -d "$DOMAIN"
            else
              echo "✅  Cert for $DOMAIN already exists, skipping."
            fi

            # 5) Reload nginx to pick up any new cert
            docker compose kill -s HUP nginx
          EOF
