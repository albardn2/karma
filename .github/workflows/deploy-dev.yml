# .github/workflows/deploy.yml
name: CD – Deploy Dev Stack

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  sync-compose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Prepare remote directories
        env:
          HOST: ${{ secrets.DEV_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.DEV_DROPLET_PASSWORD }}
        run: |
          sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no $USER@$HOST <<'EOF'
            mkdir -p /srv/myapp
            mkdir -p /srv/myapp/certs
            mkdir -p /srv/myapp/nginx/conf.d
            mkdir -p /srv/myapp/nginx/letsencrypt
            mkdir -p /srv/myapp/nginx/html/.well-known/acme-challenge
          EOF

      - name: Sync docker-compose & nginx configs
        env:
          HOST: ${{ secrets.DEV_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.DEV_DROPLET_PASSWORD }}
        run: |
          # Push docker-compose.yaml
          sshpass -p "$PASS" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/backend/docker-compose.yaml" \
            "$USER@$HOST:/srv/myapp/"

          # Push only conf.d
          sshpass -p "$PASS" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/backend/nginx/conf.d/" \
            "$USER@$HOST:/srv/myapp/nginx/conf.d/"

          # Push only letsencrypt snippets
          sshpass -p "$PASS" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            "$GITHUB_WORKSPACE/backend/nginx/letsencrypt/" \
            "$USER@$HOST:/srv/myapp/nginx/letsencrypt/"

  deploy:
    needs: sync-compose
    runs-on: ubuntu-latest
    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Pull images, install real cert & reload nginx
        env:
          HOST: ${{ secrets.DEV_DROPLET_HOST }}
          USER: root
          PASS: ${{ secrets.DEV_DROPLET_PASSWORD }}
          CERTBOT_EMAIL: zaid.bardan@gmail.com
          DOMAIN: api-dev.karma-grp.com
        run: |
          sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no $USER@$HOST <<EOF
            set -e
            cd /srv/myapp

            echo "🔄 Pulling latest images…"
            docker compose pull

            echo "🛠  Bootstrapping dummy self-signed cert (if missing)…"
            if [ ! -f certs/live/$DOMAIN/fullchain.pem ]; then
              mkdir -p certs/live/$DOMAIN
              docker run --rm \
                -v \$(pwd)/certs:/etc/letsencrypt \
                alpine:latest sh -c "\
                  apk add --no-cache openssl && \
                  openssl req -x509 -nodes -newkey rsa:2048 -days 1 \
                    -keyout /etc/letsencrypt/live/$DOMAIN/privkey.pem \
                    -out   /etc/letsencrypt/live/$DOMAIN/fullchain.pem \
                    -subj '/CN=$DOMAIN' \
                "
              echo "✅ Dummy cert created."
            fi

            echo "🚀 Starting db, web & nginx"
            docker compose up -d --force-recreate --remove-orphans db web nginx

            echo "🗑  Removing dummy cert to force real issuance…"
            rm -rf certs/live/$DOMAIN \
                   certs/archive/$DOMAIN \
                   certs/renewal/$DOMAIN.conf || true

            echo "⚙️  Requesting a real cert via webroot…"
            docker compose run --rm --entrypoint certbot certbot certonly \
              --non-interactive --agree-tos --no-eff-email \
              --email "$CERTBOT_EMAIL" \
              --webroot -w /var/www/certbot \
              -d "$DOMAIN"

            echo "♻️  Reloading nginx to pick up the Let’s Encrypt cert"
            docker compose kill -s HUP nginx
          EOF
